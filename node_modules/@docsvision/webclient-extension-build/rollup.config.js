const { terser } = require("rollup-plugin-terser");
const typescript = require('rollup-plugin-typescript2');
const log = require('fancy-log');
const colors = require('ansi-colors');
const { nodeResolve } = require('@rollup/plugin-node-resolve');
const replace = require('@rollup/plugin-replace');
const builtins = require('@erquhart/rollup-plugin-node-builtins');
const commonjs = require("@rollup/plugin-commonjs");

const plugins = [
  typescript(),
  nodeResolve({ preferBuiltins: true }),
  replace({ 'process.env.NODE_ENV': `'${process.env.NODE_ENV}'` }),
  builtins(),
  commonjs()
];
if (process.env.buildTarget === "PROD") {
  plugins.push(terser());
} else {
  log(colors.red("Building not opimized scripts for development"));
}

module.exports = {
  output: {
    format: 'amd', 
    sourcemap: true
  },
  plugins: plugins,
  external: function(moduleName) {
    return moduleName.startsWith("@docsvision/webclient") || moduleName.includes("docsvision.web") ||
      ["moment", "react", "react-dom", "styled-components", "classnames", "tslib", "noty", "qs", "shallowequal", "vis",
       "tslib", "number-to-locale-string-polyfill*", "js-base64",
       "alloyfinger", "micro-memoize", "@docsvision/material-ui-pickers", "@material-ui/core", "@date-io/moment", '@material-ui/styles', 
       "react-input-mask", "file-saver", "microevent.ts",
       "effector", "effector-react"].includes(moduleName);
  }
};